// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Board$ReactTemplate = require("./Board.bs.js");

var initialState = /* record */[
  /* board : :: */[
    /* :: */[
      /* Empty */0,
      /* :: */[
        /* Empty */0,
        /* :: */[
          /* Empty */0,
          /* [] */0
        ]
      ]
    ],
    /* :: */[
      /* :: */[
        /* Empty */0,
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* [] */0
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* [] */0
            ]
          ]
        ],
        /* [] */0
      ]
    ]
  ],
  /* gameState : Playing */Block.__(0, [/* Cross */0])
];

var winningCombs = /* :: */[
  /* :: */[
    0,
    /* :: */[
      1,
      /* :: */[
        2,
        /* [] */0
      ]
    ]
  ],
  /* :: */[
    /* :: */[
      3,
      /* :: */[
        4,
        /* :: */[
          5,
          /* [] */0
        ]
      ]
    ],
    /* :: */[
      /* :: */[
        6,
        /* :: */[
          7,
          /* :: */[
            8,
            /* [] */0
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          0,
          /* :: */[
            3,
            /* :: */[
              6,
              /* [] */0
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            1,
            /* :: */[
              4,
              /* :: */[
                7,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              2,
              /* :: */[
                5,
                /* :: */[
                  8,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                0,
                /* :: */[
                  4,
                  /* :: */[
                    8,
                    /* [] */0
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  2,
                  /* :: */[
                    4,
                    /* :: */[
                      6,
                      /* [] */0
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

function gameEnded(board) {
  return List.for_all((function (field) {
                if (Caml_obj.caml_equal(field, /* Marked */[/* Circle */1])) {
                  return true;
                } else {
                  return Caml_obj.caml_equal(field, /* Marked */[/* Cross */0]);
                }
              }), board);
}

function whosPlaying(gameState) {
  if (typeof gameState === "number" || gameState.tag || gameState[0]) {
    return /* Playing */Block.__(0, [/* Cross */0]);
  } else {
    return /* Playing */Block.__(0, [/* Circle */1]);
  }
}

function getWinner(flattenBoard, coords) {
  var match = List.nth(flattenBoard, List.nth(coords, 0));
  var match$1 = List.nth(flattenBoard, List.nth(coords, 1));
  var match$2 = List.nth(flattenBoard, List.nth(coords, 2));
  if (match) {
    if (match[0]) {
      if (match$1 && match$1[0] && match$2 && match$2[0]) {
        return /* Circle */1;
      } else {
        return /* NoOne */2;
      }
    } else if (match$1 && !(match$1[0] || !(match$2 && !match$2[0]))) {
      return /* Cross */0;
    } else {
      return /* NoOne */2;
    }
  } else {
    return /* NoOne */2;
  }
}

function checkGameState(winningRows, updatedBoard, oldBoard, gameState) {
  var match = Caml_obj.caml_equal(oldBoard, updatedBoard);
  if (match) {
    return gameState;
  } else {
    var flattenBoard = List.flatten(updatedBoard);
    var _rest = winningRows;
    while(true) {
      var rest = _rest;
      var head = List.hd(rest);
      var tail = List.tl(rest);
      var match$1 = getWinner(flattenBoard, head);
      var match$2 = gameEnded(flattenBoard);
      switch (match$1) {
        case 0 : 
            return /* Winner */Block.__(1, [/* Cross */0]);
        case 1 : 
            return /* Winner */Block.__(1, [/* Circle */1]);
        case 2 : 
            if (match$2) {
              if (tail) {
                _rest = tail;
                continue ;
              } else {
                return /* Draw */0;
              }
            } else if (tail) {
              _rest = tail;
              continue ;
            } else {
              return whosPlaying(gameState);
            }
        
      }
    };
  }
}

function checkGameState3x3(param, param$1, param$2) {
  return checkGameState(winningCombs, param, param$1, param$2);
}

function updateBoard(board, gameState, id) {
  return List.mapi((function (ind, row) {
                return List.mapi((function (index, value) {
                              var match = String(ind) + String(index) === id;
                              if (match && !value) {
                                if (typeof gameState === "number" || gameState.tag) {
                                  return /* Empty */0;
                                } else {
                                  return /* Marked */[gameState[0]];
                                }
                              } else {
                                return value;
                              }
                            }), row);
              }), board);
}

var component = ReasonReact.reducerComponent("Game");

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              return ReasonReact.element(undefined, undefined, Board$ReactTemplate.make(param[/* state */1], (function (id) {
                                return Curry._1(send, /* ClickSquare */[id]);
                              }), (function (_evt) {
                                return Curry._1(send, /* Restart */0);
                              }), /* array */[]));
            }),
          /* initialState */(function (param) {
              return initialState;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action) {
                var updatedBoard = updateBoard(state[/* board */0], state[/* gameState */1], action[0]);
                return /* Update */Block.__(0, [/* record */[
                            /* board */updatedBoard,
                            /* gameState */checkGameState3x3(updatedBoard, state[/* board */0], state[/* gameState */1])
                          ]]);
              } else {
                return /* Update */Block.__(0, [initialState]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.initialState = initialState;
exports.winningCombs = winningCombs;
exports.gameEnded = gameEnded;
exports.whosPlaying = whosPlaying;
exports.getWinner = getWinner;
exports.checkGameState = checkGameState;
exports.checkGameState3x3 = checkGameState3x3;
exports.updateBoard = updateBoard;
exports.component = component;
exports.make = make;
/* component Not a pure module */
